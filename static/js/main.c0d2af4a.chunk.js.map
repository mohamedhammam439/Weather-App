{"version":3,"sources":["component/Form.js","component/weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getweather","className","type","placeholder","name","Weather","City","Country","Tempreature","pressure","humidity","description","error","API_KEY","App","state","e","a","preventDefault","city","target","elements","value","country","fetch","api","json","data","setState","sys","main","temp","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8RAWeA,EATH,SAACC,GACT,OACI,0BAAMC,SAAUD,EAAME,WAAYC,UAAU,YACxC,2BAAOC,KAAK,OAAOC,YAAY,OAAOC,KAAK,SAC3C,2BAAOF,KAAK,OAAOC,YAAY,UAAUC,KAAK,YAC9C,iDCsBGC,EA3BA,SAACP,GACZ,OACI,6BAEIA,EAAMQ,MAAQ,qCAAWR,EAAMQ,MAG/BR,EAAMS,SAAW,yCAAeT,EAAMS,SAGtCT,EAAMU,aAAe,6CAAmBV,EAAMU,aAG9CV,EAAMW,UAAY,wCAAcX,EAAMW,UAGtCX,EAAMY,UAAY,yCAAeZ,EAAMY,UAGvCZ,EAAMa,aAAe,4CAAkBb,EAAMa,aAG7Cb,EAAMc,OAAS,sCAAYd,EAAMc,SClBvCC,G,MAAQ,oCA8DCC,E,2MA3DbC,MAAM,CACJT,KAAK,GACLC,QAAQ,GACRC,YAAY,GACZC,SAAS,GACTC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAGRZ,W,uCAAW,WAAMgB,GAAN,qBAAAC,EAAA,6DACTD,EAAEE,iBACIC,EAAKH,EAAEI,OAAOC,SAASF,KAAKG,MAC5BC,EAAQP,EAAEI,OAAOC,SAASE,QAAQD,MAH/B,SAIOE,MAAM,oDAAD,OAAqDL,EAArD,YAA6DI,EAA7D,kBAA8EV,IAJ1F,cAIHY,EAJG,gBAKQA,EAAIC,OALZ,OAKHC,EALG,OAMNR,GAAQI,EACX,EAAKK,SAAS,CACZtB,KAAKqB,EAAKvB,KACVG,QAAQoB,EAAKE,IAAIN,QACjBf,YAAYmB,EAAKG,KAAKC,KACtBtB,SAASkB,EAAKG,KAAKrB,SACnBC,SAASiB,EAAKG,KAAKpB,SACnBC,YAAYgB,EAAKK,QAAQ,GAAGrB,YAC5BC,MAAM,KAGR,EAAKgB,SAAS,CACZtB,KAAK,GACLC,QAAQ,GACRC,YAAY,GACZC,SAAS,GACTC,SAAS,GACTC,YAAY,GACZC,MAAM,uBAxBC,4C,8HA8BT,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAMD,WAAYiC,KAAKjC,aACvB,kBAAC,EAAD,CACIM,KAAM2B,KAAKlB,MAAMT,KACjBC,QAAS0B,KAAKlB,MAAMR,QACpBC,YAAayB,KAAKlB,MAAMP,YACxBC,SAAUwB,KAAKlB,MAAMN,SACrBC,SAAUuB,KAAKlB,MAAML,SACrBC,YAAasB,KAAKlB,MAAMJ,YACxBC,MAAOqB,KAAKlB,MAAMH,a,GAnDZsB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.c0d2af4a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form =(props) =>{\r\n    return(\r\n        <form onSubmit={props.getweather} className='formlist'>\r\n            <input type='text' placeholder='city' name='city' />\r\n            <input type='text' placeholder='country' name='country' />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form ;","import React from 'react';\r\n\r\nconst Weather =(props) =>{\r\n    return(\r\n        <div>\r\n        {\r\n            props.City && <p>City : {props.City}</p>\r\n        }\r\n        {\r\n            props.Country && <p>Country :  {props.Country}</p>\r\n        }\r\n        {\r\n            props.Tempreature && <p>Tempreature :  {props.Tempreature}</p>\r\n        }\r\n        {\r\n            props.pressure && <p>Pressure  {props.pressure}</p>\r\n        }\r\n        {\r\n            props.humidity && <p>Humidity : {props.humidity}</p>\r\n        }\r\n        {\r\n            props.description && <p>Description : {props.description}</p>\r\n        }\r\n        {\r\n            props.error && <p>Error : {props.error}</p>\r\n        }   \r\n        </div>\r\n    )\r\n}\r\nexport default Weather ;","import React, { Component } from 'react';\nimport Form from './component/Form';\nimport Weather from './component/weather';\nimport './App.css';\n\n\nconst API_KEY='487862f576f796db554187c8715d2b90';\n\nclass App extends Component{\n  state={\n    City:'',\n    Country:'',\n    Tempreature:'',\n    pressure:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n\n  getweather=async(e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    const api=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const data=await api.json();\n   if (city && country) {\n    this.setState({\n      City:data.name,\n      Country:data.sys.country,\n      Tempreature:data.main.temp,\n      pressure:data.main.pressure,\n      humidity:data.main.humidity,\n      description:data.weather[0].description,\n      error:''\n    })\n   }else {\n    this.setState({\n      City:'',\n      Country:'',\n      Tempreature:'',\n      pressure:'',\n      humidity:'',\n      description:'',\n      error:'Please Insert Data'\n    })\n   }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Form getweather={this.getweather} />\n        <Weather \n            City={this.state.City}\n            Country={this.state.Country}\n            Tempreature={this.state.Tempreature}\n            pressure={this.state.pressure}\n            humidity={this.state.humidity}\n            description={this.state.description}\n            error={this.state.error}\n        />\n       \n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}